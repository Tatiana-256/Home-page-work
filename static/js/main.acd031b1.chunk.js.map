{"version":3,"sources":["components/message/message.module.css","components/character/character.module.css","common/header.JPG","components/Increment/Increment.module.css","components/header/head.module.css","components/Names/names.module.css","components/header/head.component.jsx","components/message/message.component.jsx","components/character/character.jsx","components/Names/names.jsx","components/Increment/IncrementComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","styles","head","Message","today","Date","time","getHours","getMinutes","getSeconds","date","getFullYear","getMonth","getDate","general","box","src","avatar","alt","data","text","placeholder","Characteristics","skills","character","id","map","a","bold","key","page","Names","name","names","Increment","props","increment","newNameRef","current","value","alert","newName","state","setState","React","createRef","this","ref","type","onClick","index","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.acd031b1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"general\":\"message_general__3G3Qq\",\"data\":\"message_data__skAW2\",\"box\":\"message_box__20Tox\",\"text\":\"message_text__2EMFE\",\"time\":\"message_time__g4lrI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"character_page__Xxrbq\",\"general\":\"character_general__3Ljme\",\"bold\":\"character_bold__TtRmS\"};","module.exports = __webpack_public_path__ + \"static/media/header.01718e6b.JPG\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"Increment_page__3CM2R\",\"general\":\"Increment_general__vd5h3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"head\":\"head_head__2VfL-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"names\":\"names_names__Un0Ow\"};","import React from \"react\";\r\nimport styles from './head.module.css';\r\nimport avatar from '../../common/header.JPG'\r\n\r\n\r\nconst Header = () => {\r\n    return (<div className={styles.head}>\r\n    </div>)\r\n}\r\n\r\nexport default Header","import React from \"react\";\r\nimport styles from './message.module.css';\r\nimport avatar from \"../../common/header.JPG\";\r\n\r\n\r\nconst Message = () => {\r\n\r\n    let today = new Date();\r\n    let time = `${today.getHours()}:${today.getMinutes()}:${today.getSeconds()}`;\r\n    let date = `${today.getFullYear()}/${(today.getMonth() + 1)}/${today.getDate()}`;\r\n\r\n    return <div className={styles.general}>\r\n        <div className={styles.box}><img src={avatar} alt='photo'/>\r\n        </div>\r\n        <div className={styles.data}>\r\n            <div>\r\n                <a>Матвиенко Татьяна Юрьевна</a>\r\n            </div>\r\n            <textarea className={styles.text} placeholder='Your message'/>\r\n            <div className={styles.time}>\r\n                <div>{date}</div>\r\n                <div>{time}</div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\nexport default Message\r\n\r\n\r\n","import React from \"react\";\r\nimport styles from './character.module.css';\r\n\r\n\r\nconst Characteristics = () => {\r\n\r\n    let characteristics = [\r\n        {character: \"responsible\", id: 1},\r\n        {character: \"friendly\", id: 2},\r\n        {character: \"active\", id: 3}]\r\n\r\n    let skills = characteristics.map(a => {\r\n            if (a.id === 2) {\r\n                return <div className={styles.bold} key={a.id}>{a.character}</div>\r\n            } else {\r\n                return <div key={a.id}>{a.character}</div>\r\n            }\r\n        }\r\n    )\r\n\r\n    return <div className={styles.page}>\r\n        <div className={styles.general}>\r\n            <h2>My characteristics</h2>\r\n            <div>\r\n                {skills}\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Characteristics\r\n\r\n\r\n","import React from \"react\";\r\nimport styles from './names.module.css';\r\n\r\n\r\nconst Names = ({name}) => {\r\n    return <div className={styles.names}>{name}</div>\r\n}\r\n\r\nexport default Names","import React from \"react\";\r\nimport styles from './Increment.module.css';\r\nimport Names from \"../Names/names\";\r\n\r\n\r\nclass Increment extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: 0,\r\n            name: []\r\n        }\r\n    }\r\n\r\n    increment = () => {\r\n        let name = this.newNameRef.current.value\r\n        alert(name)\r\n        this.newNameRef.current.value = ''\r\n        let newName = [...this.state.name, name]\r\n        this.setState({value: this.state.value + 1, name: newName})\r\n    }\r\n\r\n    newNameRef = React.createRef()\r\n\r\n\r\n    render() {\r\n\r\n        return <div>\r\n            <div className={styles.page}>\r\n                <div className={styles.general}>\r\n                    <span>{this.state.value}</span>\r\n                    <input ref={this.newNameRef} type=\"text\" placeholder=\"New name\"/>\r\n                    <button onClick={(this.increment)}>\r\n                        Increment and add name\r\n                    </button>\r\n                </div>\r\n                <div>\r\n                    {this.state.name.map(name => <Names name={name} key={name.index}/>)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Increment","import React from 'react';\r\nimport './App.css';\r\nimport Header from \"./components/header/head.component\";\r\nimport Message from \"./components/message/message.component\";\r\nimport Characteristics from \"./components/character/character\";\r\nimport Increment from \"./components/Increment/IncrementComponent\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <Header/>\r\n                <Message/>\r\n                <Characteristics/>\r\n                <Increment/>\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}